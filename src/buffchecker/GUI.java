/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package buffchecker;

import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author David
 */
public class GUI extends javax.swing.JFrame {
    
    
    private int[] redBlue = {99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 107};
    private int[] green = {97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 105};
    
    private String audioPath = "";
    private String audioPathPow= "";
    private boolean canStart = false;
    private int xStart;
    private int yStart;
    private Checker check = null;
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        setSizes();
    }
    
    public GUI(String path, String pathPow) {
        initComponents();
        this.audio.setText(path);
        this.audioPow.setText(pathPow);
        audioPath = path;
        audioPathPow = pathPow;
        setSizes();
    }
    
    public GUI(String x, String y, String path, String pathPow) {
        initComponents();
        this.nobleX.setText(x);
        this.nobleY.setText(y);
        this.audio.setText(path);
        this.audioPow.setText(pathPow);
        audioPath = path;
        audioPathPow = pathPow;
        setSizes();
    }
    
    private void setSizes() {
        this.setResizable(false);
        this.nobleX.setColumns(5);
        this.nobleY.setColumns(5);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nobleX = new javax.swing.JTextField();
        nobleY = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        audio = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        start = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        scan = new javax.swing.JButton();
        nobleCheck = new javax.swing.JCheckBox();
        powCheck = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        audioPow = new javax.swing.JTextField();
        browsePow = new javax.swing.JButton();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Row buff start");

        nobleX.setText("395");

        nobleY.setText("680");

        jLabel2.setText("Audio");

        audio.setEditable(false);
        audio.setText("path to audio file");
        audio.setMinimumSize(new java.awt.Dimension(100, 20));

        browse.setText("Browse");
        browse.setEnabled(false);
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        start.setText("Start");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        stop.setText("Stop");
        stop.setEnabled(false);
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        jLabel3.setText("x");

        jLabel5.setText("y");

        jLabel6.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel6.setText("Lineage 2 Buff Checker");

        scan.setText("Scan");
        scan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanActionPerformed(evt);
            }
        });

        nobleCheck.setText("Noblesse Blessing");
        nobleCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nobleCheckActionPerformed(evt);
            }
        });

        powCheck.setText("Prophecy of Wind");
        powCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powCheckActionPerformed(evt);
            }
        });

        jLabel7.setText("Audio");

        audioPow.setEditable(false);
        audioPow.setText("path to audio file");
        audioPow.setMinimumSize(new java.awt.Dimension(100, 20));

        browsePow.setText("Browse");
        browsePow.setEnabled(false);
        browsePow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browsePowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(powCheck)
                                    .addComponent(nobleCheck))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(audioPow, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(audio, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel2))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browsePow, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(browse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nobleX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nobleY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(scan, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(scan)
                            .addComponent(nobleX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(nobleY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nobleCheck)
                                .addGap(14, 14, 14))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(audio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5))
                                    .addComponent(browse, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(6, 6, 6)
                                .addComponent(audioPow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(powCheck))))
                    .addComponent(browsePow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start)
                    .addComponent(stop))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("."));
        int ret = fileChooser.showOpenDialog(null);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            audioPath = selectedFile.getAbsolutePath();
            audio.setText(audioPath);
        }
    }//GEN-LAST:event_browseActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        if (!this.nobleCheck.isSelected() && !this.powCheck.isSelected()) {
            JOptionPane.showMessageDialog(this, "Check at least one buff.");
            return;
        }
        if (!checkStartCoordinates()) {
            JOptionPane.showMessageDialog(null, "Coordinates must be between 0 and your Screen Resolution.");
            return;
        }
        else {
            xStart = Integer.parseInt(this.nobleX.getText());
            yStart = Integer.parseInt(this.nobleY.getText());
        }
        try {
            int aud = checkAudio();
            switch(aud) {
                    case 1: JOptionPane.showMessageDialog(null, "Invalid audio path.");
                            break;
                    case 2: JOptionPane.showMessageDialog(null, "Only wav files are supported.");
                            break;
                    default: canStart = true;
                             break;
            }
        } catch (IOException | UnsupportedAudioFileException | LineUnavailableException | InterruptedException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (canStart) {
            String buff = "", buff2 = "";
            if (this.nobleCheck.isSelected()) buff = this.nobleCheck.getText();
            if (this.powCheck.isSelected()) buff2 = this.powCheck.getText();
            try {
                saveSettings();
            } catch (FileNotFoundException | UnsupportedEncodingException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.nobleCheck.setEnabled(false);
            this.powCheck.setEnabled(false);
            this.nobleX.setEditable(false);
            this.nobleY.setEditable(false);
            this.browse.setEnabled(false);
            this.browsePow.setEnabled(false);
            this.start.setEnabled(false);
            this.stop.setEnabled(true);
            try {
                check = new Checker(audioPath, audioPathPow, xStart, yStart, buff, buff2);
            } catch (AWTException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            check.start();
        }
        
    }//GEN-LAST:event_startActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        check.terminate();
        this.nobleX.setEditable(true);
        this.nobleY.setEditable(true);
        this.browse.setEnabled(true);
        this.browsePow.setEnabled(true);
        this.start.setEnabled(true);
        this.stop.setEnabled(false);
        this.nobleCheck.setEnabled(true);
        this.powCheck.setEnabled(true);
    }//GEN-LAST:event_stopActionPerformed

    private void scanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanActionPerformed
        final JFrame b = new JFrame();
        JPanel pan = new JPanel();
        JLabel lab = new JLabel("Hide your buffs behind this Panel and then click Accept.");
        JButton but = new JButton("Accept");
        but.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                b.dispose();
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    boolean found = findBuffsStart(b);
                } catch (AWTException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        but.setSize(50, 15);
        pan.add(lab);
        pan.add(but);
        b.add(pan);
        b.setSize(350, 100);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        b.setLocation(dim.width/2-b.getSize().width/2, dim.height/2-b.getSize().height/2);
        b.setVisible(true);
    }//GEN-LAST:event_scanActionPerformed

    private void browsePowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browsePowActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("."));
        int ret = fileChooser.showOpenDialog(null);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            audioPathPow = selectedFile.getAbsolutePath();
            audioPow.setText(audioPathPow);
        }
    }//GEN-LAST:event_browsePowActionPerformed

    private void nobleCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nobleCheckActionPerformed
        if (this.nobleCheck.isSelected()) {
            this.browse.setEnabled(true);
        }
        else {
            this.browse.setEnabled(false);
        }
    }//GEN-LAST:event_nobleCheckActionPerformed

    private void powCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powCheckActionPerformed
        if (this.powCheck.isSelected()) {
            this.browsePow.setEnabled(true);
        }
        else {
            this.browsePow.setEnabled(false);
        }
    }//GEN-LAST:event_powCheckActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField audio;
    private javax.swing.JTextField audioPow;
    private javax.swing.JButton browse;
    private javax.swing.JButton browsePow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JCheckBox nobleCheck;
    private javax.swing.JTextField nobleX;
    private javax.swing.JTextField nobleY;
    private javax.swing.JCheckBox powCheck;
    private javax.swing.JButton scan;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables

    public boolean findBuffsStart(JFrame frame) throws AWTException {
        Robot r = new Robot();
        Point p = frame.getLocation();
        int x = (int) p.getX();
        int y = (int) p.getY();
        int width = frame.getWidth();
        int height = frame.getHeight();
        System.out.println("Location " + x + " " + y);
        Rectangle rect = new Rectangle(x, y, width, height);
        BufferedImage bi = r.createScreenCapture(rect);
        //printBI(bi);
        for (int i = 0; i < width - 25; ++i) {
            for (int j = 0; j < height - 25; ++j) {
                if (checkBuffStart(bi, i, j)) {
                    this.nobleX.setText(Integer.toString(i+x));
                    this.nobleY.setText(Integer.toString(j+y));
                    JOptionPane.showMessageDialog(this, "Buff bar found!");
                    return true;
                }
            }
        }
        JOptionPane.showMessageDialog(this, "Unable to find Buff bar, enter coordinates manually or Scan again");
        return false;
    }
    
    private boolean checkStartCoordinates() {
        try {
            int x = Integer.parseInt(this.nobleX.getText());
            int y = Integer.parseInt(this.nobleY.getText());
            return ((x >= 0 && x <= Toolkit.getDefaultToolkit().getScreenSize().getWidth()) &&
                 y >= 0) && y <= Toolkit.getDefaultToolkit().getScreenSize().getHeight();
        } catch (NumberFormatException ex) {
            return false;
        } 
    }

    private int checkAudio() throws IOException, UnsupportedAudioFileException, LineUnavailableException, InterruptedException {
        File f = new File(audioPath);
        File fp = new File(audioPathPow);
        if (!f.exists() || !fp.exists()) return 1;
        
        String[] pathArray = audioPath.split("\\.");
        String extension = pathArray[pathArray.length-1];
        if (!extension.equals("wav") && !extension.equals("WAV")) return 2;
        
        pathArray = audioPathPow.split("\\.");
        extension = pathArray[pathArray.length-1];
        if (!extension.equals("wav") && !extension.equals("WAV")) return 2;
        return 0;
    }

    private void saveSettings() throws FileNotFoundException, UnsupportedEncodingException {
        try (PrintWriter writer = new PrintWriter("settings.txt", "UTF-8")) {
            writer.println(xStart);
            writer.println(yStart);
            writer.println(audioPath);
            writer.println(audioPathPow);
        }
    }

    private boolean checkBuffStart(BufferedImage bi, int i, int j) {
        for (int n = 0; n < 25; ++n) {
            int colr = bi.getRGB(i + n, j);
            int colc = bi.getRGB(i, j + n);
            
            int  rr = (colr & 0x00ff0000) >> 16;
            int  gr = (colr & 0x0000ff00) >> 8;
            int  br = colr & 0x000000ff;
            
            int  rc = (colc & 0x00ff0000) >> 16;
            int  gc = (colc & 0x0000ff00) >> 8;
            int  bc = colc & 0x000000ff;
            
            if (redBlue[n] != rr || redBlue[n] != br || green[n] != gr ||
                redBlue[n] != rc || redBlue[n] != bc || green[n] != gc) return false;
        }
        return true;
    }
}
