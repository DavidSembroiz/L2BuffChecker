/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package buffchecker;

import java.awt.AWTException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

/**
 *
 * @author David
 */
public class Checker extends Thread {
    
    private boolean running = true;
    Robot r;
    Rectangle rect;
    private final String audioPath, audioPathPow;
    private final int xStart, yStart, xLength = 25, yLength = 25, rows = 2, buffsPerRow = 12;
    String buff, buffPow;
    
    private int[][] powMatRed = {{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 107},
                                 {99, 51, 57, 57, 68, 73, 74, 74, 74, 74, 66, 66, 66, 60, 60, 57, 49, 49, 73, 67, 66, 36, 67, 120, 124},
                                 {99, 57, 57, 64, 74, 74, 73, 74, 74, 81, 81, 69, 66, 60, 60, 59, 49, 55, 82, 86, 55, 76, 120, 118, 70},
                                 {99, 57, 64, 74, 74, 74, 68, 83, 95, 97, 98, 94, 78, 64, 57, 57, 49, 61, 108, 94, 62, 133, 128, 93, 111},
                                 {99, 60, 74, 74, 90, 91, 100, 124, 91, 80, 77, 82, 106, 82, 94, 122, 61, 92, 114, 93, 120, 130, 123, 123, 123},
                                 {99, 60, 74, 74, 90, 98, 103, 96, 132, 140, 111, 93, 83, 95, 136, 81, 64, 106, 85, 114, 128, 113, 123, 123, 123},
                                 {99, 72, 74, 97, 92, 106, 110, 164, 159, 145, 115, 120, 96, 101, 130, 57, 98, 103, 110, 130, 113, 124, 123, 123, 123},
                                 {99, 82, 82, 98, 106, 123, 126, 107, 108, 109, 100, 116, 150, 96, 77, 74, 131, 127, 138, 124, 125, 132, 122, 113, 104},
                                 {99, 82, 87, 108, 127, 124, 111, 113, 98, 97, 116, 112, 163, 89, 73, 125, 127, 134, 132, 127, 132, 127, 114, 111, 118},
                                 {99, 82, 91, 131, 129, 116, 113, 92, 75, 85, 180, 181, 92, 66, 91, 124, 133, 137, 133, 132, 127, 117, 119, 112, 114},
                                 {99, 90, 101, 130, 117, 112, 87, 82, 90, 209, 209, 145, 113, 51, 118, 176, 183, 159, 181, 175, 155, 195, 168, 175, 132},
                                 {99, 90, 106, 141, 126, 90, 82, 86, 144, 223, 193, 155, 149, 91, 160, 202, 184, 174, 139, 162, 191, 189, 219, 196, 187},
                                 {99, 90, 121, 155, 101, 82, 82, 97, 177, 188, 119, 132, 152, 176, 228, 237, 189, 151, 143, 195, 172, 157, 167, 202, 216},
                                 {99, 83, 167, 129, 66, 66, 72, 192, 177, 142, 86, 95, 96, 213, 223, 171, 184, 140, 185, 155, 129, 126, 159, 157, 160},
                                 {99, 94, 179, 90, 66, 66, 144, 177, 159, 117, 95, 85, 99, 189, 175, 162, 160, 156, 90, 99, 91, 96, 116, 112, 119},
                                 {99, 97, 171, 83, 66, 105, 163, 171, 155, 109, 94, 82, 114, 193, 162, 135, 143, 70, 57, 66, 94, 103, 79, 79, 100},
                                 {99, 80, 121, 71, 101, 184, 176, 210, 149, 113, 82, 84, 152, 140, 140, 137, 103, 59, 57, 61, 105, 84, 105, 77, 44},
                                 {99, 66, 66, 66, 162, 173, 166, 145, 145, 145, 82, 96, 156, 140, 135, 106, 101, 67, 73, 74, 74, 105, 62, 26, 80},
                                 {99, 66, 66, 66, 162, 125, 83, 107, 110, 113, 101, 107, 159, 140, 114, 83, 109, 67, 89, 56, 94, 71, 10, 65, 81},
                                 {99, 66, 74, 59, 103, 57, 57, 63, 61, 61, 121, 162, 198, 128, 99, 113, 88, 63, 59, 59, 96, 18, 52, 58, 5},
                                 {99, 59, 72, 64, 68, 68, 68, 68, 70, 66, 93, 153, 183, 118, 107, 123, 63, 57, 75, 78, 51, 58, 58, 8, 0},
                                 {99, 57, 63, 73, 79, 79, 79, 74, 74, 74, 90, 129, 163, 117, 129, 107, 57, 69, 96, 47, 58, 52, 5, 0, 0},
                                 {99, 60, 61, 65, 72, 74, 74, 77, 75, 80, 86, 80, 108, 127, 115, 65, 51, 73, 55, 49, 23, 0, 0, 0, 0},
                                 {99, 60, 60, 60, 61, 71, 74, 77, 76, 76, 81, 88, 100, 84, 94, 63, 50, 52, 49, 45, 12, 0, 0, 0, 0},
                                 {107, 60, 60, 60, 57, 59, 64, 74, 74, 78, 99, 101, 81, 96, 74, 58, 49, 49, 49, 41, 1, 0, 0, 0, 0}};
    
    private int[][] powMatGreen = {{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 105},
                                   {97, 45, 48, 48, 51, 58, 60, 56, 56, 56, 52, 52, 52, 47, 47, 44, 40, 40, 62, 54, 53, 15, 54, 164, 170},
                                   {97, 48, 48, 51, 60, 60, 58, 56, 56, 75, 75, 56, 52, 47, 47, 46, 40, 45, 70, 83, 41, 69, 164, 157, 57},
                                   {97, 48, 51, 56, 60, 60, 51, 79, 110, 116, 104, 98, 71, 50, 44, 44, 40, 51, 94, 96, 52, 147, 178, 106, 142},
                                   {97, 49, 56, 56, 65, 67, 94, 131, 70, 53, 46, 57, 115, 51, 62, 82, 30, 86, 125, 58, 153, 189, 115, 158, 187},
                                   {97, 49, 56, 56, 65, 91, 107, 80, 140, 153, 125, 84, 61, 60, 92, 51, 37, 112, 72, 134, 183, 130, 158, 184, 178},
                                   {97, 55, 56, 68, 73, 118, 131, 195, 189, 168, 139, 149, 89, 65, 87, 33, 100, 105, 118, 189, 130, 165, 190, 188, 153},
                                   {97, 56, 56, 80, 117, 163, 170, 122, 124, 126, 80, 94, 120, 83, 48, 43, 158, 122, 198, 156, 159, 195, 175, 128, 83},
                                   {97, 56, 63, 98, 174, 164, 130, 134, 101, 98, 94, 90, 128, 72, 40, 140, 123, 176, 163, 170, 195, 170, 132, 119, 156},
                                   {97, 56, 70, 135, 177, 142, 133, 87, 51, 71, 140, 140, 77, 28, 76, 139, 173, 196, 172, 195, 170, 119, 160, 126, 136},
                                   {97, 60, 85, 162, 145, 133, 68, 56, 63, 156, 149, 86, 58, 26, 108, 180, 207, 174, 203, 172, 136, 205, 134, 141, 101},
                                   {97, 60, 101, 188, 164, 77, 56, 59, 106, 168, 135, 96, 93, 73, 159, 210, 208, 193, 144, 149, 198, 195, 183, 162, 154},
                                   {97, 60, 137, 222, 99, 56, 56, 68, 133, 142, 64, 75, 93, 178, 239, 249, 215, 161, 150, 204, 165, 141, 133, 167, 181},
                                   {97, 72, 186, 132, 48, 48, 52, 137, 124, 88, 38, 58, 60, 219, 226, 178, 196, 142, 197, 116, 94, 91, 90, 89, 90},
                                   {97, 87, 206, 82, 48, 48, 104, 124, 107, 66, 58, 36, 72, 195, 182, 169, 171, 163, 79, 66, 58, 62, 67, 64, 68},
                                   {97, 92, 191, 72, 48, 77, 121, 119, 101, 58, 55, 28, 112, 200, 169, 148, 150, 56, 40, 36, 61, 68, 47, 47, 57},
                                   {97, 71, 127, 58, 63, 133, 126, 159, 98, 62, 44, 49, 191, 190, 190, 185, 80, 45, 44, 60, 136, 97, 155, 115, 65},
                                   {97, 52, 52, 52, 116, 124, 115, 95, 93, 92, 44, 71, 199, 190, 180, 121, 78, 51, 57, 80, 83, 136, 91, 39, 120},
                                   {97, 52, 52, 52, 116, 84, 47, 56, 59, 62, 82, 99, 208, 190, 136, 71, 84, 51, 70, 51, 116, 78, 14, 96, 122},
                                   {97, 54, 60, 48, 81, 36, 36, 41, 38, 39, 107, 175, 235, 157, 81, 118, 79, 47, 42, 57, 95, 18, 51, 56, 15},
                                   {97, 48, 58, 52, 46, 46, 46, 50, 53, 48, 64, 161, 212, 131, 101, 145, 47, 40, 62, 79, 49, 57, 56, 18, 12},
                                   {97, 46, 51, 59, 56, 56, 56, 60, 60, 60, 60, 125, 181, 129, 158, 99, 40, 55, 89, 44, 57, 51, 15, 12, 12},
                                   {97, 47, 48, 51, 59, 60, 60, 59, 57, 63, 71, 58, 132, 162, 141, 51, 43, 70, 47, 40, 32, 24, 21, 19, 19},
                                   {97, 47, 47, 47, 51, 58, 60, 59, 58, 59, 61, 79, 113, 86, 103, 47, 41, 44, 40, 39, 28, 24, 21, 20, 19},
                                   {105, 47, 47, 47, 48, 49, 53, 56, 56, 60, 110, 113, 62, 108, 65, 37, 40, 40, 40, 37, 24, 24, 23, 21, 21}};
    
    private int[][] powMatBlue = {{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 107},
                                  {99, 78, 88, 88, 103, 113, 115, 115, 115, 115, 99, 99, 99, 85, 85, 76, 74, 74, 109, 101, 99, 52, 99, 173, 178},
                                  {99, 88, 88, 99, 115, 115, 113, 115, 115, 124, 121, 103, 99, 85, 85, 80, 74, 83, 121, 132, 82, 115, 173, 170, 103},
                                  {99, 88, 99, 114, 115, 115, 103, 127, 142, 145, 147, 141, 117, 99, 76, 76, 74, 92, 159, 145, 94, 207, 184, 135, 160},
                                  {99, 94, 115, 115, 140, 141, 153, 170, 139, 128, 118, 125, 157, 57, 57, 57, 73, 131, 172, 144, 175, 187, 181, 176, 173},
                                  {99, 94, 115, 115, 140, 151, 157, 144, 176, 184, 162, 140, 127, 57, 57, 57, 80, 158, 117, 168, 185, 167, 176, 174, 174},
                                  {99, 111, 115, 150, 143, 161, 167, 206, 201, 189, 169, 175, 143, 57, 57, 57, 143, 151, 165, 187, 167, 179, 173, 173, 176},
                                  {99, 123, 123, 150, 149, 169, 173, 157, 158, 159, 101, 102, 104, 70, 26, 18, 190, 194, 183, 181, 181, 181, 173, 169, 166},
                                  {99, 123, 131, 167, 175, 171, 155, 166, 144, 142, 102, 102, 105, 53, 16, 136, 194, 187, 189, 181, 181, 181, 170, 169, 171},
                                  {99, 123, 139, 206, 177, 161, 157, 135, 109, 124, 106, 106, 101, 0, 58, 133, 188, 184, 188, 181, 181, 181, 172, 169, 170},
                                  {99, 140, 151, 180, 173, 167, 137, 82, 82, 89, 80, 30, 5, 10, 97, 173, 212, 203, 211, 179, 155, 202, 115, 118, 98},
                                  {99, 140, 156, 191, 183, 141, 132, 82, 86, 90, 67, 37, 33, 63, 152, 207, 212, 208, 196, 165, 197, 194, 139, 127, 123},
                                  {99, 140, 171, 205, 153, 132, 132, 83, 88, 88, 9, 20, 35, 173, 241, 253, 214, 200, 197, 202, 176, 158, 114, 130, 137},
                                  {99, 131, 200, 168, 99, 99, 97, 77, 64, 32, 10, 30, 32, 231, 236, 212, 215, 169, 217, 40, 38, 37, 8, 8, 8},
                                  {99, 139, 210, 136, 99, 99, 76, 64, 48, 9, 30, 8, 41, 220, 213, 207, 191, 187, 117, 35, 35, 35, 8, 8, 8},
                                  {99, 142, 204, 131, 99, 87, 70, 59, 43, 1, 27, 0, 78, 222, 207, 195, 174, 95, 82, 33, 35, 35, 8, 8, 8},
                                  {99, 127, 161, 119, 25, 76, 71, 96, 38, 6, 16, 22, 189, 181, 181, 178, 161, 85, 82, 90, 148, 120, 162, 119, 69},
                                  {99, 115, 115, 115, 63, 70, 65, 35, 35, 35, 16, 50, 199, 181, 176, 147, 156, 98, 110, 107, 107, 148, 96, 41, 124},
                                  {99, 115, 115, 115, 63, 40, 13, 0, 3, 6, 64, 79, 209, 181, 155, 124, 170, 98, 137, 83, 134, 104, 15, 101, 125},
                                  {99, 101, 115, 91, 109, 57, 57, 46, 34, 36, 140, 183, 222, 185, 151, 167, 131, 91, 85, 95, 149, 35, 102, 111, 31},
                                  {99, 91, 112, 98, 69, 69, 69, 84, 94, 72, 110, 174, 206, 173, 160, 179, 91, 82, 110, 124, 83, 93, 111, 36, 24},
                                  {99, 88, 97, 113, 82, 82, 82, 123, 123, 123, 107, 149, 185, 172, 186, 160, 82, 100, 143, 77, 93, 85, 31, 24, 24},
                                  {99, 90, 94, 103, 113, 115, 115, 115, 111, 127, 131, 123, 163, 190, 172, 95, 77, 108, 82, 74, 61, 49, 43, 38, 38},
                                  {99, 90, 90, 90, 97, 111, 115, 115, 113, 114, 125, 134, 152, 124, 140, 92, 76, 79, 74, 72, 55, 49, 44, 42, 38},
                                  {107, 90, 90, 90, 90, 93, 100, 108, 108, 118, 151, 153, 125, 143, 108, 83, 74, 74, 74, 70, 50, 49, 47, 44, 43}};
    
    
    private int[][] noblesseMatRed = {{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 107},
                                      {99, 222, 230, 225, 230, 206, 210, 202, 238, 234, 217, 231, 217, 217, 206, 185, 190, 71, 12, 0, 0, 1, 0, 0, 0},
                                      {99, 226, 218, 223, 189, 206, 213, 230, 230, 210, 215, 222, 223, 171, 212, 174, 161, 89, 18, 5, 4, 10, 69, 13, 22},
                                      {99, 233, 199, 194, 180, 224, 238, 236, 230, 223, 216, 207, 223, 173, 187, 132, 32, 77, 63, 14, 7, 7, 67, 26, 7},
                                      {99, 226, 204, 201, 225, 226, 226, 239, 239, 239, 215, 211, 181, 200, 152, 145, 26, 30, 183, 100, 40, 23, 3, 0, 0},
                                      {99, 220, 214, 223, 232, 232, 222, 239, 239, 239, 209, 211, 168, 197, 142, 190, 72, 78, 54, 207, 220, 136, 25, 5, 0},
                                      {99, 229, 225, 229, 226, 233, 223, 239, 239, 239, 226, 211, 170, 193, 97, 195, 167, 185, 44, 58, 207, 228, 51, 17, 0},
                                      {99, 239, 217, 232, 217, 232, 217, 228, 218, 223, 225, 197, 170, 158, 103, 169, 119, 218, 70, 12, 113, 238, 222, 48, 0},
                                      {99, 239, 217, 232, 222, 235, 220, 204, 218, 191, 225, 184, 165, 190, 142, 70, 82, 199, 70, 0, 21, 184, 233, 103, 7},
                                      {99, 239, 208, 228, 226, 224, 208, 193, 218, 181, 225, 158, 157, 214, 180, 59, 35, 88, 49, 0, 0, 83, 245, 157, 14},
                                      {99, 241, 170, 228, 225, 199, 210, 168, 207, 160, 202, 141, 135, 206, 178, 59, 18, 38, 33, 0, 0, 23, 212, 148, 12},
                                      {99, 241, 170, 228, 188, 181, 210, 133, 214, 166, 145, 200, 145, 206, 178, 59, 23, 16, 23, 41, 0, 0, 130, 166, 18},
                                      {99, 209, 170, 233, 158, 163, 204, 160, 203, 197, 143, 222, 149, 206, 132, 44, 41, 8, 16, 60, 14, 27, 37, 154, 25},
                                      {99, 93, 178, 162, 157, 176, 180, 192, 188, 239, 101, 226, 159, 184, 119, 43, 16, 13, 11, 8, 8, 8, 8, 26, 14},
                                      {99, 100, 205, 135, 211, 184, 217, 197, 203, 239, 96, 212, 159, 190, 184, 59, 21, 14, 24, 8, 8, 19, 14, 11, 9},
                                      {99, 100, 231, 187, 236, 193, 235, 197, 203, 239, 84, 173, 199, 245, 219, 114, 16, 9, 29, 27, 8, 40, 38, 8, 8},
                                      {99, 130, 247, 170, 223, 186, 241, 196, 189, 210, 29, 175, 178, 102, 231, 112, 11, 16, 42, 47, 0, 56, 76, 8, 8},
                                      {99, 130, 247, 170, 223, 186, 241, 196, 189, 183, 29, 156, 83, 52, 231, 112, 66, 98, 29, 24, 0, 120, 76, 8, 8},
                                      {99, 163, 247, 137, 227, 198, 241, 196, 189, 157, 29, 103, 32, 42, 201, 62, 11, 17, 1, 0, 24, 152, 38, 8, 8},
                                      {99, 197, 231, 100, 240, 185, 233, 164, 196, 57, 24, 24, 24, 22, 107, 28, 13, 13, 13, 11, 95, 106, 8, 8, 8, },
                                      {99, 217, 141, 141, 237, 175, 233, 133, 145, 41, 24, 73, 68, 12, 30, 12, 13, 13, 13, 52, 125, 26, 12, 10, 8},
                                      {99, 178, 76, 208, 227, 165, 239, 36, 36, 26, 33, 150, 112, 8, 8, 38, 32, 13, 13, 56, 26, 9, 30, 19, 8},
                                      {99, 41, 83, 233, 156, 175, 166, 30, 32, 26, 22, 26, 19, 19, 16, 46, 69, 16, 16, 16, 16, 16, 15, 11, 8},
                                      {99, 41, 130, 219, 87, 158, 51, 26, 26, 26, 22, 19, 26, 52, 16, 16, 16, 16, 16, 16, 16, 16, 12, 11, 11},
                                      {107, 61, 207, 146, 37, 51, 35, 24, 24, 24, 25, 21, 23, 40, 16, 16, 16, 16, 16, 16, 16, 16, 15, 13, 11}};
;
    private int[][] noblesseMatGreen = {{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 105},
                                        {97, 192, 199, 194, 198, 174, 179, 168, 206, 201, 181, 190, 181, 185, 175, 154, 176, 83, 41, 0, 1, 2, 0, 0, 0},
                                        {97, 195, 187, 193, 157, 174, 181, 198, 198, 176, 180, 184, 185, 138, 181, 141, 155, 98, 46, 14, 10, 27, 59, 10, 18},
                                        {97, 201, 167, 164, 149, 193, 206, 204, 198, 190, 181, 173, 185, 141, 154, 98, 56, 88, 77, 39, 21, 18, 55, 21, 6},
                                        {97, 196, 166, 163, 200, 201, 201, 210, 213, 208, 184, 178, 145, 169, 125, 117, 57, 59, 155, 101, 67, 57, 4, 0, 0},
                                        {97, 189, 180, 192, 211, 211, 196, 218, 218, 212, 177, 179, 133, 166, 117, 162, 85, 89, 73, 168, 175, 125, 43, 7, 0},
                                        {97, 201, 195, 200, 201, 213, 196, 222, 215, 212, 193, 177, 135, 163, 75, 165, 147, 158, 69, 78, 168, 180, 87, 30, 0},
                                        {97, 207, 184, 199, 206, 230, 206, 219, 204, 211, 205, 170, 135, 143, 110, 147, 126, 207, 89, 26, 116, 229, 198, 57, 20},
                                        {97, 207, 184, 199, 214, 233, 209, 184, 204, 167, 205, 152, 129, 161, 131, 89, 98, 191, 89, 16, 34, 181, 209, 104, 25},
                                        {97, 207, 176, 197, 220, 216, 193, 171, 204, 154, 205, 120, 118, 174, 155, 84, 61, 102, 72, 16, 16, 87, 217, 145, 30},
                                        {97, 216, 140, 202, 210, 176, 195, 134, 182, 125, 171, 112, 105, 178, 162, 89, 45, 82, 72, 16, 16, 39, 210, 149, 27},
                                        {97, 216, 140, 202, 166, 154, 195, 95, 193, 133, 119, 170, 115, 178, 162, 89, 54, 41, 54, 61, 16, 16, 135, 168, 33},
                                        {97, 183, 137, 207, 122, 132, 187, 126, 181, 173, 113, 190, 118, 178, 133, 79, 87, 26, 40, 83, 30, 44, 50, 160, 39},
                                        {97, 111, 156, 148, 122, 138, 143, 159, 153, 203, 123, 185, 150, 165, 123, 74, 39, 33, 29, 24, 24, 24, 16, 39, 24},
                                        {97, 115, 168, 133, 178, 150, 182, 163, 166, 203, 120, 177, 150, 169, 163, 84, 52, 36, 55, 24, 24, 33, 23, 20, 17},
                                        {97, 115, 182, 161, 201, 158, 199, 163, 166, 203, 114, 158, 172, 201, 186, 117, 39, 25, 65, 39, 24, 49, 55, 16, 16},
                                        {97, 129, 211, 155, 197, 158, 213, 177, 170, 187, 73, 166, 171, 121, 203, 126, 37, 41, 61, 56, 24, 63, 74, 20, 20},
                                        {97, 129, 211, 155, 197, 158, 213, 177, 170, 163, 73, 154, 107, 91, 203, 126, 80, 108, 50, 40, 24, 113, 74, 20, 20},
                                        {97, 151, 211, 134, 201, 171, 213, 177, 170, 144, 73, 118, 75, 86, 186, 97, 37, 42, 29, 24, 40, 134, 43, 20, 20},
                                        {97, 184, 205, 119, 233, 178, 225, 165, 183, 97, 60, 60, 60, 60, 137, 66, 40, 40, 40, 34, 95, 105, 28, 28, 28},
                                        {97, 196, 147, 146, 229, 166, 225, 143, 150, 88, 60, 84, 81, 51, 66, 51, 40, 40, 40, 63, 117, 45, 35, 32, 28},
                                        {97, 172, 104, 190, 220, 158, 231, 84, 84, 78, 64, 122, 102, 48, 48, 74, 57, 40, 40, 65, 45, 33, 71, 50, 28},
                                        {97, 97, 122, 213, 164, 176, 172, 79, 83, 69, 57, 62, 55, 55, 52, 89, 74, 48, 48, 49, 40, 40, 42, 36, 33},
                                        {97, 97, 152, 206, 114, 166, 90, 71, 70, 69, 57, 54, 61, 94, 52, 52, 48, 48, 48, 44, 43, 40, 38, 37, 36},
                                        {105, 110, 199, 160, 80, 90, 78, 65, 65, 65, 62, 57, 59, 80, 52, 52, 48, 48, 48, 47, 44, 43, 43, 40, 37}};
    private int[][] noblesseMatBlue = {{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 107},
                                       {99, 118, 125, 120, 132, 111, 114, 91, 138, 133, 82, 82, 82, 110, 101, 83, 149, 112, 94, 0, 3, 5, 8, 8, 8},
                                       {99, 121, 114, 119, 96, 111, 117, 129, 129, 101, 82, 82, 82, 71, 107, 74, 139, 117, 96, 27, 22, 55, 52, 16, 22},
                                       {99, 127, 98, 95, 88, 127, 139, 136, 129, 119, 82, 82, 82, 73, 85, 37, 100, 114, 110, 80, 42, 38, 50, 24, 13},
                                       {99, 126, 67, 58, 140, 143, 143, 155, 164, 150, 112, 107, 70, 84, 61, 58, 114, 113, 72, 83, 104, 110, 14, 8, 8},
                                       {99, 110, 94, 117, 161, 160, 133, 177, 176, 163, 104, 107, 55, 82, 57, 79, 102, 101, 107, 44, 40, 69, 63, 18, 8},
                                       {99, 136, 122, 134, 142, 164, 135, 187, 170, 162, 124, 107, 58, 80, 36, 81, 77, 72, 110, 97, 44, 37, 118, 45, 8},
                                       {99, 148, 123, 140, 185, 220, 186, 192, 173, 181, 165, 119, 72, 96, 108, 93, 114, 133, 106, 62, 101, 150, 109, 69, 57},
                                       {99, 148, 123, 140, 197, 226, 191, 144, 173, 119, 165, 96, 65, 88, 99, 117, 108, 129, 106, 57, 65, 128, 112, 81, 59},
                                       {99, 148, 113, 136, 205, 201, 165, 124, 173, 99, 165, 53, 50, 82, 90, 119, 99, 109, 102, 57, 57, 89, 114, 94, 60},
                                       {99, 166, 85, 151, 179, 140, 157, 79, 138, 68, 88, 53, 50, 99, 104, 128, 81, 140, 123, 33, 33, 61, 176, 142, 72},
                                       {99, 166, 85, 151, 122, 111, 157, 28, 148, 77, 55, 86, 55, 99, 104, 128, 94, 74, 95, 84, 33, 33, 133, 152, 76},
                                       {99, 129, 85, 157, 75, 82, 147, 68, 132, 123, 54, 99, 57, 99, 114, 131, 149, 49, 72, 107, 50, 67, 85, 146, 79},
                                       {99, 126, 99, 104, 45, 57, 60, 82, 80, 107, 152, 68, 113, 101, 104, 107, 70, 59, 51, 41, 41, 41, 33, 55, 40},
                                       {99, 124, 90, 113, 82, 64, 86, 85, 87, 107, 155, 78, 113, 101, 101, 106, 91, 64, 99, 41, 41, 48, 40, 37, 34},
                                       {99, 124, 82, 96, 99, 69, 99, 85, 87, 107, 164, 104, 87, 99, 100, 104, 70, 43, 117, 52, 41, 61, 69, 33, 33},
                                       {99, 111, 132, 118, 139, 110, 154, 117, 115, 121, 139, 123, 123, 138, 123, 137, 80, 82, 95, 63, 49, 65, 62, 41, 41},
                                       {99, 111, 132, 118, 139, 110, 154, 117, 115, 114, 139, 125, 133, 144, 123, 137, 107, 123, 89, 56, 49, 84, 62, 41, 41},
                                       {99, 117, 132, 112, 142, 119, 154, 117, 115, 106, 139, 131, 138, 145, 127, 143, 80, 82, 75, 49, 56, 93, 50, 41, 41},
                                       {99, 139, 145, 121, 193, 152, 188, 143, 145, 135, 107, 107, 107, 101, 171, 106, 71, 71, 71, 67, 84, 87, 49, 49, 49},
                                       {99, 142, 129, 129, 190, 144, 188, 140, 141, 133, 107, 97, 98, 93, 108, 93, 71, 71, 71, 75, 91, 70, 63, 56, 49},
                                       {99, 135, 117, 141, 184, 137, 192, 133, 133, 132, 105, 81, 88, 90, 90, 115, 79, 71, 71, 76, 70, 66, 123, 86, 49},
                                       {99, 156, 153, 142, 155, 159, 157, 135, 145, 116, 101, 103, 100, 94, 90, 128, 74, 82, 82, 84, 67, 66, 71, 63, 58},
                                       {99, 156, 149, 143, 142, 155, 135, 118, 117, 116, 101, 100, 103, 136, 90, 90, 82, 82, 82, 74, 72, 67, 65, 64, 63},
                                       {107, 154, 143, 148, 133, 135, 132, 107, 107, 107, 103, 101, 102, 121, 90, 90, 82, 82, 82, 80, 74, 73, 72, 68, 64}};

    
    public Checker(String path, String path2, int xStart, int yStart, String buff, String buff2) throws AWTException {
        audioPath = path;
        audioPathPow = path2;
        this.xStart = xStart;
        this.yStart = yStart;
        r = new Robot();
        rect = new Rectangle(xStart, yStart, (1+xLength)*buffsPerRow, (1+yLength)*rows);
        this.buff = buff;
        this.buffPow = buff2;
    }
    
    public void terminate() {
        running = false;
    }
    
    @Override
    public void run() {
        while (running) {
            if (!buff.equals("")) {
                try {
                    if (!checkNoblesse()) playClip(new File(audioPath));
                } catch (AWTException | IOException | UnsupportedAudioFileException | LineUnavailableException | InterruptedException ex) {
                    Logger.getLogger(Checker.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            if (!buffPow.equals("")) {
                try {
                    if (!checkPow()) playClip(new File(audioPathPow));
                } catch (AWTException | IOException | UnsupportedAudioFileException | LineUnavailableException | InterruptedException ex) {
                    Logger.getLogger(Checker.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            try {
                Thread.sleep(700);
            } catch (InterruptedException ex) {
                Logger.getLogger(Checker.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public boolean checkPow() throws AWTException {
        BufferedImage bi = r.createScreenCapture(rect);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < buffsPerRow; ++j) {
                boolean pix;
                double checked = 0;
                int correct = 0;
                for (int ii = 0; ii < xLength; ++ii) {
                    for (int jj = 0; jj < yLength; ++jj) {
                       pix = checkPowPixel(bi, i, j, ii, jj);
                       if (pix) ++correct;
                       ++checked;
                       if (checked > 150 && correct/checked > 0.8) return true;
                    }
                }
            }
        }
        return false;
    }
    
    public boolean checkNoblesse() throws AWTException {
        BufferedImage bi = r.createScreenCapture(rect);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < buffsPerRow; ++j) {
                boolean pix;
                double checked = 0;
                int correct = 0;
                for (int ii = 0; ii < xLength; ++ii) {
                    for (int jj = 0; jj < yLength; ++jj) {
                       pix = checkNoblessePixel(bi, i, j, ii, jj);
                       if (pix) ++correct;
                       ++checked;
                       if (checked > 150 && correct/checked > 0.8) return true;
                    }
                }
            }
        }
        return false;
    }
    
    private boolean checkPowPixel(BufferedImage bi, int i, int j, int ii, int jj) {
        int x = j*(xLength+1)+jj;
        int y = i*(yLength+1)+ii;
        int col = bi.getRGB(x, y);
        int  red = (col & 0x00ff0000) >> 16;
        int  green = (col & 0x0000ff00) >> 8;
        int  blue = col & 0x000000ff; 
        int diff = Math.abs(red - powMatRed[jj][ii]) +
                   Math.abs(green - powMatGreen[jj][ii]) +
                   Math.abs(blue - powMatBlue[jj][ii]);
        return diff <= 35;
    }
    
    private boolean checkNoblessePixel(BufferedImage bi, int i, int j, int ii, int jj) {
        int x = j*(xLength+1)+jj;
        int y = i*(yLength+1)+ii;
        int col = bi.getRGB(x, y);
        int  red = (col & 0x00ff0000) >> 16;
        int  green = (col & 0x0000ff00) >> 8;
        int  blue = col & 0x000000ff; 
        int diff = Math.abs(red - noblesseMatRed[jj][ii]) +
                   Math.abs(green - noblesseMatGreen[jj][ii]) +
                   Math.abs(blue - noblesseMatBlue[jj][ii]);
        return diff <= 35;
    }
    
    private void playClip(File clipFile) throws IOException, 
      UnsupportedAudioFileException, LineUnavailableException, InterruptedException {
      class AudioListener implements LineListener {
        private boolean done = false;
        @Override public synchronized void update(LineEvent event) {
          LineEvent.Type eventType = event.getType();
          if (eventType == LineEvent.Type.STOP || eventType == LineEvent.Type.CLOSE) {
            done = true;
            notifyAll();
          }
        }
        public synchronized void waitUntilDone() throws InterruptedException {
          while (!done) { wait(); }
        }
      }
      AudioListener listener = new AudioListener();
      try (AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(clipFile)) {
        Clip clip = AudioSystem.getClip();
        clip.addLineListener(listener);
        clip.open(audioInputStream);
        try {
          clip.start();
          listener.waitUntilDone();
        } finally {
          clip.close();
        }
      }
    }
}
